version: '3'
services:
  kafka:
    image: docker.io/bitnami/kafka:3.4
    ports:
      - "9092:9092"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT

  debezium-source:
    image: debezium/connect:2.4
    depends_on:
      - kafka
      - pgAMI
      - MyAMI
    ports:
      - 8083:8083
    environment:
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: debezium_config
      OFFSET_STORAGE_TOPIC: debezium_offset
      STATUS_STORAGE_TOPIC: debezium_status
      BOOTSTRAP_SERVERS: kafka:9092
      CONNECT_REST_ADVERTISED_HOST_NAME: debezium-source      
      CONNECT_PLUGIN_PATH: "/kafka/connect,/kafka/libs/aiven-http-sink-connector"

    volumes:
      - ./ojdbc8.jar:/kafka/libs/ojdbc8.jar
      - ./http-connector-for-apache-kafka-0.7.0-SNAPSHOT:/kafka/libs/aiven-http-sink-connector

  pgAMI:
    image: postgres:11
    restart: always
    command: [ 'postgres', '-c', 'wal_level=logical' ]
    environment:
      POSTGRES_USER: testuser
      POSTGRES_PASSWORD: testpassword
      POSTGRES_DB: Pgami_db
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init_pgAMI.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5433:5432"

  MyAMI:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: Myami_db
      MYSQL_USER: mysqlami
      MYSQL_PASSWORD: mysqlpassword
    command: --default-authentication-plugin=caching_sha2_password
            --server-id=1
            --log-bin=mysql-bin
            --binlog_format=ROW
            --binlog_row_image=FULL
    volumes:
      - mysql-data:/var/lib/mysql
      - ./init_MyAMI.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "3306:3306"


  #oracleami:
   # image: ayoola17/oracleami_cdc:v1
    #ports:
     # - "1521:1521"  
    #volumes:
     # - oracle-data:/opt/oracle/oradata  



  python_app:
    build: .  # Build an image using the Dockerfile in the current directory
    volumes:
      - .:/app  # Mount the current directory
    working_dir: /app
    depends_on:
      - kafka
      - debezium-source
      - pgAMI
      - MyAMI


volumes:
  kafka_data:
    driver: local
  mysql-data:
    driver: local
  postgres-data:
    driver: local
  oracle-data:
    driver: local

